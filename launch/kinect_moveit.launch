<?xml version="1.0"?>
<launch>
  <!-- BAXTER -->

  <!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior -->
  <arg name="load_robot_description" default="false"/>

  <!-- Left and right electric gripper params. Set to true to check for collisions for their links -->
  <arg name="right_electric_gripper" default="true"/>
  <arg name="left_electric_gripper" default="true"/>

  <remap from="joint_states" to="robot/joint_states"/>
  <!-- Set the kinematic tips for the left_arm and right_arm move_groups -->
  <arg name="left_tip_name" default="left_gripper"/>
  <arg name="right_tip_name" default="right_gripper"/>
  <include file="$(find baxter_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
    <arg name="left_electric_gripper" value="$(arg left_electric_gripper)"/>
    <arg name="right_electric_gripper" value="$(arg right_electric_gripper)"/>
    <arg name="left_tip_name" value="$(arg left_tip_name)"/>
    <arg name="right_tip_name" value="$(arg right_tip_name)"/>
  </include>

  <include file="$(find baxter_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
  </include>

  <!-- Baxter provided utility -->
  <node name="joint_trajectory_action_server" pkg="baxter_interface" type="joint_trajectory_action_server.py" output="screen" />

  <!-- Baxter correct right gripper -->
  <node name="send_urdf_fragment" pkg="baxter_epoke" type="send_urdf_fragment.py" output="screen">
     <param name="duration" type="double" value="100.0"/>
     <param name="file" type="str" value="$ (find baxter_description)/urdf/right_end_effector.urdf.xacro"/>
     <param name="link" type="str" value="right_hand"/>
     <param name="joint" type="str" value="right_gripper_base"/>
  </node>



  <!-- KINECT -->

  <!-- If you want to move the kinect frame to baxter base around -->
  <!-- <node name="interactive_static_transform_publisher" pkg="baxter_epoke" type="interactive_static_transform_publisher.py" output="screen">
    <param name="child_frame" value="kinect2_rgb_optical_frame" />
    <param name="parent_frame" value="base" />
    <param name="tf_publish_period_in_sec" value="0.1" />
  </node> -->

  <node pkg="tf" type="static_transform_publisher" name="kinect_tf_broadcaster" args="1.43120515347 0.0691849589348 0.107023477554 -0.558904349804 -0.540400147438 0.43881303072 0.450597375631 base kinect2_rgb_optical_frame 100" />


  <arg name="base_name"         default="kinect2"/>
  <arg name="sensor"            default=""/>
  <arg name="publish_tf"        default="false"/>
  <arg name="base_name_tf"      default="$(arg base_name)"/>
  <arg name="fps_limit"         default="-1.0"/>
  <arg name="calib_path"        default="$(find kinect2_bridge)/data/"/>
  <arg name="use_png"           default="false"/>
  <arg name="jpeg_quality"      default="90"/>
  <arg name="png_level"         default="1"/>
  <arg name="depth_method"      default="default"/>
  <arg name="depth_device"      default="-1"/>
  <arg name="reg_method"        default="default"/>
  <arg name="reg_device"        default="-1"/>
  <arg name="max_depth"         default="12.0"/>
  <arg name="min_depth"         default="0.1"/>
  <arg name="queue_size"        default="5"/>
  <arg name="bilateral_filter"  default="true"/>
  <arg name="edge_aware_filter" default="true"/>
  <arg name="worker_threads"    default="4"/>
  <arg name="machine"           default="localhost"/>
  <arg name="nodelet_manager"   default="$(arg base_name)"/>
  <arg name="start_manager"     default="true"/>
  <arg name="use_machine"       default="true"/>
  <arg name="respawn"           default="true"/>
  <arg name="use_nodelet"       default="true"/>
  <arg name="output"            default="screen"/>

  <machine name="localhost" address="localhost" if="$(arg use_machine)"/>

  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager"
        if="$(arg start_manager)" machine="$(arg machine)" output="screen"/>

  <!-- Nodelet version of kinect2_bridge -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_bridge" machine="$(arg machine)"
        args="load kinect2_bridge/kinect2_bridge_nodelet $(arg nodelet_manager)"
        respawn="$(arg respawn)" output="$(arg output)" if="$(arg use_nodelet)">
    <param name="base_name"         type="str"    value="$(arg base_name)"/>
    <param name="sensor"            type="str"    value="$(arg sensor)"/>
    <param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
    <param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
    <param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
    <param name="calib_path"        type="str"    value="$(arg calib_path)"/>
    <param name="use_png"           type="bool"   value="$(arg use_png)"/>
    <param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
    <param name="png_level"         type="int"    value="$(arg png_level)"/>
    <param name="depth_method"      type="str"    value="$(arg depth_method)"/>
    <param name="depth_device"      type="int"    value="$(arg depth_device)"/>
    <param name="reg_method"        type="str"    value="$(arg reg_method)"/>
    <param name="reg_device"        type="int"    value="$(arg reg_device)"/>
    <param name="max_depth"         type="double" value="$(arg max_depth)"/>
    <param name="min_depth"         type="double" value="$(arg min_depth)"/>
    <param name="queue_size"        type="int"    value="$(arg queue_size)"/>
    <param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
    <param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
    <param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
  </node>

  <!-- Node version of kinect2_bridge -->
  <node pkg="kinect2_bridge" type="kinect2_bridge" name="$(arg base_name)_bridge" machine="$(arg machine)"
        respawn="$(arg respawn)" output="$(arg output)" unless="$(arg use_nodelet)">
    <param name="base_name"         type="str"    value="$(arg base_name)"/>
    <param name="sensor"            type="str"    value="$(arg sensor)"/>
    <param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
    <param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
    <param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
    <param name="calib_path"        type="str"    value="$(arg calib_path)"/>
    <param name="use_png"           type="bool"   value="$(arg use_png)"/>
    <param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
    <param name="png_level"         type="int"    value="$(arg png_level)"/>
    <param name="depth_method"      type="str"    value="$(arg depth_method)"/>
    <param name="depth_device"      type="int"    value="$(arg depth_device)"/>
    <param name="reg_method"        type="str"    value="$(arg reg_method)"/>
    <param name="reg_device"        type="int"    value="$(arg reg_device)"/>
    <param name="max_depth"         type="double" value="$(arg max_depth)"/>
    <param name="min_depth"         type="double" value="$(arg min_depth)"/>
    <param name="queue_size"        type="int"    value="$(arg queue_size)"/>
    <param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
    <param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
    <param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
  </node>

  <!-- sd point cloud (512 x 424) -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_sd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/sd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/sd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/sd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/sd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>

  <!-- qhd point cloud (960 x 540) -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_qhd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/qhd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/qhd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/qhd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/qhd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>

  <!-- hd point cloud (1920 x 1080) -->
  <node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_hd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="rgb/camera_info"             to="$(arg base_name)/hd/camera_info"/>
    <remap from="rgb/image_rect_color"        to="$(arg base_name)/hd/image_color_rect"/>
    <remap from="depth_registered/image_rect" to="$(arg base_name)/hd/image_depth_rect"/>
    <remap from="depth_registered/points"     to="$(arg base_name)/hd/points"/>
    <param name="queue_size" type="int" value="$(arg queue_size)"/>
  </node>


  <!-- RVIZ -->

  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find baxter_epoke)/rviz/kinect_moveit.rviz" />
</launch>
